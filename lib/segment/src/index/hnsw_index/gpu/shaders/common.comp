#version 450

#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_shuffle : enable
#extension GL_KHR_shader_subgroup_shuffle_relative : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable

#ifndef SUBGROUP_SIZE
#error "SUBGROUP_SIZE not defined"
#endif

#ifndef WORKING_GROUP_SIZE
#error "WORKING_GROUP_SIZE not defined"
#endif

layout(local_size_x = WORKING_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

#define SUBGROUP_ID (gl_GlobalInvocationID.x / SUBGROUP_SIZE)
#define SUBGROUP_INVOCATION_ID gl_SubgroupInvocationID 

#define CONCAT(a, b) a##_##b

#define POINT_ID uint

const POINT_ID INVALID_POINT_ID = 0xffffffff;

const float positive_infinity = 1.0 / 0.0;
const float negative_infinity = -1.0 / 0.0;
#define UINT_MAX 0xffffffff

struct ScoredPoint {
    POINT_ID id;
    float score;
};

// TODO(gpu): measure WORKING_GROUP_SIZE and use it unstead of WORKING_GROUP_SIZE / SUBGROUP_SIZE
// maybe use WORKING_GROUP_SIZE / 8 and return error is gl_SubgroupSize is smaller
shared ScoredPoint merge_buffer[WORKING_GROUP_SIZE / SUBGROUP_SIZE];
