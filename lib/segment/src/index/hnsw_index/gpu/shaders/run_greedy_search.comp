#version 450

#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_shuffle : enable
#extension GL_KHR_shader_subgroup_shuffle_relative : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable

#include "common.comp"
layout(local_size_x = SUBGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

#define VECTOR_STORAGE_LAYOUT_SET 1
#include "vector_storage.comp"

#define LINKS_LAYOUT_SET 2
#include "links.comp"

#define NEAREST_HEAP_LAYOUT_SET 3
#include "nearest_heap.comp"

#define CANDIDATES_HEAP_LAYOUT_SET 4
#include "candidates_heap.comp"

#define VISITED_FLAGS_LAYOUT_SET 5
#include "visited_flags.comp"

#include "search_context.comp"

struct SearchRequest {
    uint id;
    uint entry;
};

layout(set = 0, binding = 0) buffer SearchRequests {
    SearchRequest data[];
} search_requests;

layout(set = 0, binding = 1) buffer SearchResults {
    uint data[];
} search_results;

void main() {
    search_context_init();
    uint subgroup_index = SUBGROUP_ID;
    SearchRequest search_request = search_requests.data[subgroup_index];

    float entry_score = similarity(search_request.id, search_request.entry);
    ScoredPoint result = greedy_search(search_request.id, ScoredPoint(search_request.entry, entry_score));

    if (subgroupElect()) {
        search_results.data[subgroup_index] = result.id;
    }
}
