struct SearchRequest {
    uint id;
    uint entry;
};

layout(set = 0, binding = 0) buffer SearchRequests {
    SearchRequest data[];
} search_requests;

layout(set = 0, binding = 1) buffer SearchResults {
    ScoredPoint data[];
} search_results;

void main() {
    search_context_init();
    uint subgroup_index = SUBGROUP_ID;
    SearchRequest search_request = search_requests.data[subgroup_index];

    float entry_score = similarity(search_request.id, search_request.entry);
    search(search_request.id, ScoredPoint(search_request.entry, entry_score));
    uint count = run_heuristic();

    barrier();

    if (subgroupElect()) {
        uint result_index_offset = NEAREST_HEAP_EF * subgroup_index;
        for (uint i = 0; i < count; i++) {
            search_results.data[result_index_offset + i] = get_nearest(i);
        }
    }
}
