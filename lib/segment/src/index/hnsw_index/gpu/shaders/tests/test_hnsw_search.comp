struct SearchRequest {
    uint id;
    uint entry;
};

layout(set = 0, binding = 0) buffer SearchRequests {
    SearchRequest data[];
} search_requests;

layout(set = 0, binding = 1) buffer SearchResults {
    ScoredPoint data[];
} search_results;

void main() {
    search_context_init();
    SearchRequest search_request = search_requests.data[gl_GlobalInvocationID.y];

    set_vector_storage_target(search_request.id);
    float entry_score = similarity(search_request.entry);
    uint count = search(search_request.id, ScoredPoint(search_request.entry, entry_score));

    barrier();

    if (gl_GlobalInvocationID.x == 0) {
        uint result_index_offset = NEAREST_HEAP_EF * gl_GlobalInvocationID.y;
        uint i = 0;
        for (; i < count; i++) {
            search_results.data[result_index_offset + i] = get_nearest(i);
        }
        for (; i < NEAREST_HEAP_EF; i++) {
            search_results.data[result_index_offset + i] = ScoredPoint(UINT_MAX, 0.0);
        }
    }
}
