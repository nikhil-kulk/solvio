layout(set = 0, binding = 0)
readonly uniform TestParams {
    uint input_counts;
} test_params;

layout(set = 0, binding = 1) buffer ScoredPointsInput {
    ScoredPoint data[];
} input_points;

layout(set = 0, binding = 2) buffer ScoresOuput {
    float data[];
} scores_output;

void main() {
    nearest_heap_init();
    uint subgroup_index = SUBGROUP_ID;

    for (uint i = 0; i < test_params.input_counts; i++) {
        uint point_index = subgroup_index * test_params.input_counts + i;
        ScoredPoint point = input_points.data[point_index];
        push_nearest(point);

        groupMemoryBarrier();
        memoryBarrier();

        float nearest_smaller_score_check = subgroupMin(nearest_smaller.score);
        bool is_different = nearest_smaller_score_check != nearest_smaller.score;
        if (subgroupAny(is_different)) {
            if (subgroupElect()) {
                scores_output.data[point_index] = positive_infinity;
            }
        } else if (subgroupElect()) {
            scores_output.data[point_index] = nearest_smaller.score;
        }
    }

    sort_nearest();
}
