layout(set = 0, binding = 0)
readonly uniform TestParams {
    uint input_counts;
} test_params;

layout(set = 0, binding = 1) buffer ScoredPointsInput {
    ScoredPoint data[];
} input_points;

layout(set = 0, binding = 2) buffer ScoresOuput {
    float data[];
} scores_output;

layout(set = 0, binding = 3) buffer SortedOuput {
    uint data[];
} sorted_output;

void main() {
    nearest_heap_init();

    for (uint i = 0; i < test_params.input_counts; i++) {
        uint point_index = gl_GlobalInvocationID.y * test_params.input_counts + i;
        ScoredPoint point = input_points.data[point_index];
        push_nearest(point);

        if (gl_GlobalInvocationID.x == 0) {
            scores_output.data[point_index] = nearest_smaller.score;
        }
        barrier();
    }

    sort_nearest();
    for (uint i = 0; i < NEAREST_HEAP_EF; i++) {
        uint point_index = gl_GlobalInvocationID.y * NEAREST_HEAP_EF + i;
        ScoredPoint point = get_nearest(i);
        sorted_output.data[point_index] = point.id;
    }
}
