openapi: 3.0.1
info:
  title: Solvio API
  description: "API description for Solvio vector search engine. Describes CRUD and search operations on collections of points (vectors with payload)."
  contact:
    email: andrey@vasnetsov.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
externalDocs:
  description: Find out more about Solvio
  url: https://github.com/generall/solvio
servers:
  - url: http://localhost:6333
tags:
  - name: collections
    description: Searchable collections of points.
  - name: points
    description: Float-point vectors with payload.

paths:
  /collections:
    get:
      tags:
        - collections
      summary: Get list of existing collections
      operationId: get_collections
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  time:
                    type: number
                    format: float
                    description: Time spent to process this request
                  status:
                    type: string
                    enum: ["Ok"]
                  result:
                    $ref: "#/components/schemas/CollectionsResponse"
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - collections
      summary: Perform update operation on collections
      operationId: update_collections
      requestBody:
        description: Operation to perform on collections
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StorageOps"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  time:
                    type: number
                    format: float
                    description: Time spent to process this request
                  status:
                    type: string
                    enum: ["Ok"]
                  result:
                    type: boolean
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /collections/{name}:
    get:
      tags:
        - collections
      summary: Get information about existing collection
      operationId: get_collection
      parameters:
        - name: name
          in: path
          description: Name of the collection to retrieve
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  time:
                    type: number
                    format: float
                    description: Time spent to process this request
                  status:
                    type: string
                    enum: ["Ok"]
                  result:
                    $ref: "#/components/schemas/CollectionInfo"
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - points
      summary: Update points in collection
      operationId: update_points
      requestBody:
        description: Points update operations
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionUpdateOperations"

      parameters:
        - name: name
          in: path
          description: Name of the collection to search in
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  time:
                    type: number
                    format: float
                    description: Time spent to process this request
                  status:
                    type: string
                    enum: [ "Ok" ]
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/UpdateResult"
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"


  /collections/{name}/points/{id}:
    get:
      tags:
        - points
      summary: Retrieve point by id
      operationId: get_point
      parameters:
        - name: name
          in: path
          description: Name of the collection to retrieve from
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Id of the point
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  time:
                    type: number
                    format: float
                    description: Time spent to process this request
                  status:
                    type: string
                    enum: ["Ok"]
                  result:
                    $ref: "#/components/schemas/Record"
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /collections/{name}/points:
    post:
      tags:
        - points
      summary: Retrieve points by ids
      operationId: get_points
      requestBody:
        description: List of points to retrieve
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PointRequest"

      parameters:
        - name: name
          in: path
          description: Name of the collection to retrieve from
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  time:
                    type: number
                    format: float
                    description: Time spent to process this request
                  status:
                    type: string
                    enum: ["Ok"]
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Record"
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /collections/{name}/points/search:
    post:
      tags:
        - points
      summary: Search points
      operationId: search_points
      requestBody:
        description: Search request with optional filtering
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"

      parameters:
        - name: name
          in: path
          description: Name of the collection to search in
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  time:
                    type: number
                    format: float
                    description: Time spent to process this request
                  status:
                    type: string
                    enum: ["Ok"]
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/ScoredPoint"
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        time:
          type: number
          format: float
          description: Time spent to process this request
        status:
          type: object
          properties:
            error:
              type: string
              description: Description of the occurred error.
        result:
          type: object
          nullable: true

    AliasOperations:
      anyOf:
      - description: Create alternative name for a collection. Collection will be
          available under both names for search, retrieve,
        properties:
          create_alias:
            properties:
              alias_name:
                type: string
              collection_name:
                type: string
            required:
            - alias_name
            - collection_name
            type: object
        required:
        - create_alias
        type: object
      - description: Delete alias if exists
        properties:
          delete_alias:
            properties:
              alias_name:
                type: string
            required:
            - alias_name
            type: object
        required:
        - delete_alias
        type: object
      - description: Change alias to a new one
        properties:
          rename_alias:
            properties:
              new_alias_name:
                type: string
              old_alias_name:
                type: string
            required:
            - new_alias_name
            - old_alias_name
            type: object
        required:
        - rename_alias
        type: object
    CollectionDescription:
      properties:
        name:
          type: string
      required:
      - name
      type: object
    CollectionInfo:
      description: Current statistics and configuration of the collection.
      properties:
        config:
          allOf:
          - $ref: '#/components/schemas/SegmentConfig'
          description: Collection settings
        disk_data_size:
          description: Disk space, used by collection
          format: uint
          minimum: 0
          type: integer
        ram_data_size:
          description: RAM used by collection
          format: uint
          minimum: 0
          type: integer
        segments_count:
          description: Number of segments in collection
          format: uint
          minimum: 0
          type: integer
        vectors_count:
          description: Number of vectors in collection
          format: uint
          minimum: 0
          type: integer
      required:
      - config
      - disk_data_size
      - ram_data_size
      - segments_count
      - vectors_count
      type: object
    CollectionUpdateOperations:
      anyOf:
      - $ref: '#/components/schemas/PointOps'
      - $ref: '#/components/schemas/PayloadOps'
    CollectionsResponse:
      properties:
        collections:
          items:
            $ref: '#/components/schemas/CollectionDescription'
          type: array
      required:
      - collections
      type: object
    Condition:
      anyOf:
      - description: Nested filter
        properties:
          filter:
            $ref: '#/components/schemas/Filter'
        required:
        - filter
        type: object
      - description: Check if point has field with a given value
        properties:
          match:
            $ref: '#/components/schemas/Match'
        required:
        - match
        type: object
      - description: Check if points value lies in a given range
        properties:
          range:
            $ref: '#/components/schemas/Range'
        required:
        - range
        type: object
      - description: Check if points geo location lies in a given area
        properties:
          geo_bounding_box:
            $ref: '#/components/schemas/GeoBoundingBox'
        required:
        - geo_bounding_box
        type: object
      - description: Check if points id is in a given set
        properties:
          has_id:
            items:
              format: uint64
              minimum: 0
              type: integer
            type: array
        required:
        - has_id
        type: object
    Distance:
      description: Type of internal tags, build from payload Distance function types
        used to compare vectors
      enum:
      - Cosine
      - Euclid
      - Dot
      type: string
    Filter:
      properties:
        must:
          description: All conditions must match
          items:
            $ref: '#/components/schemas/Condition'
          nullable: true
          type: array
        must_not:
          description: All conditions must NOT match
          items:
            $ref: '#/components/schemas/Condition'
          nullable: true
          type: array
        should:
          description: At least one of thous conditions should match
          items:
            $ref: '#/components/schemas/Condition'
          nullable: true
          type: array
      type: object
    GeoBoundingBox:
      properties:
        bottom_right:
          allOf:
          - $ref: '#/components/schemas/GeoPoint'
          description: Coordinates of the bottom right point of the area rectangle
        key:
          description: Name of the field to match with
          type: string
        top_left:
          allOf:
          - $ref: '#/components/schemas/GeoPoint'
          description: Coordinates of the top left point of the area rectangle
      required:
      - bottom_right
      - key
      - top_left
      type: object
    GeoPoint:
      properties:
        lat:
          format: double
          type: number
        lon:
          format: double
          type: number
      required:
      - lat
      - lon
      type: object
    Indexes:
      anyOf:
      - description: Do not use any index, scan whole vector collection during search.
          Guarantee 100% precision, but may be time consuming on large collections.
        properties:
          options:
            type: object
          type:
            enum:
            - plain
            type: string
        required:
        - options
        - type
        type: object
      - description: Use filterable HNSW index for approximate search. Is very fast
          even on a very huge collections, but require additional space to store index
          and additional time to build it.
        properties:
          options:
            properties:
              ef_construct:
                description: Number of neighbours to consider during the index building.
                  Larger the value - more accurate the search, more time required
                  to build index.
                format: uint
                minimum: 0
                type: integer
              m:
                description: Number of edges per node in the index graph. Larger the
                  value - more accurate the search, more space required.
                format: uint
                minimum: 0
                type: integer
            required:
            - ef_construct
            - m
            type: object
          type:
            enum:
            - hnsw
            type: string
        required:
        - options
        - type
        type: object
    Match:
      properties:
        integer:
          description: Integer value to match
          format: int64
          nullable: true
          type: integer
        key:
          description: Name of the field to match with
          type: string
        keyword:
          description: Keyword value to match
          nullable: true
          type: string
      required:
      - key
      type: object
    PayloadInterface:
      anyOf:
      - properties:
          type:
            enum:
            - keyword
            type: string
          value:
            $ref: '#/components/schemas/PayloadVariant_for_String'
        required:
        - type
        - value
        type: object
      - properties:
          type:
            enum:
            - integer
            type: string
          value:
            $ref: '#/components/schemas/PayloadVariant_for_int64'
        required:
        - type
        - value
        type: object
      - properties:
          type:
            enum:
            - float
            type: string
          value:
            $ref: '#/components/schemas/PayloadVariant_for_double'
        required:
        - type
        - value
        type: object
      - properties:
          type:
            enum:
            - geo
            type: string
          value:
            $ref: '#/components/schemas/PayloadVariant_for_GeoPoint'
        required:
        - type
        - value
        type: object
    PayloadOps:
      anyOf:
      - description: Set payload value, overrides if it is already exists
        properties:
          set_payload:
            properties:
              payload:
                additionalProperties:
                  $ref: '#/components/schemas/PayloadInterface'
                type: object
              points:
                description: Assigns payload to each point in this list
                items:
                  format: uint64
                  minimum: 0
                  type: integer
                type: array
            required:
            - payload
            - points
            type: object
        required:
        - set_payload
        type: object
      - description: Deletes specified payload values if they are assigned
        properties:
          delete_payload:
            properties:
              keys:
                items:
                  type: string
                type: array
              points:
                description: Deletes values from each point in this list
                items:
                  format: uint64
                  minimum: 0
                  type: integer
                type: array
            required:
            - keys
            - points
            type: object
        required:
        - delete_payload
        type: object
      - description: Drops all Payload values associated with given points.
        properties:
          clear_payload:
            properties:
              points:
                items:
                  format: uint64
                  minimum: 0
                  type: integer
                type: array
            required:
            - points
            type: object
        required:
        - clear_payload
        type: object
      description: Define operations description for point payloads manipulation
    PayloadType:
      anyOf:
      - properties:
          type:
            enum:
            - keyword
            type: string
          value:
            items:
              type: string
            type: array
        required:
        - type
        - value
        type: object
      - properties:
          type:
            enum:
            - integer
            type: string
          value:
            items:
              format: int64
              type: integer
            type: array
        required:
        - type
        - value
        type: object
      - properties:
          type:
            enum:
            - float
            type: string
          value:
            items:
              format: double
              type: number
            type: array
        required:
        - type
        - value
        type: object
      - properties:
          type:
            enum:
            - geo
            type: string
          value:
            items:
              $ref: '#/components/schemas/GeoPoint'
            type: array
        required:
        - type
        - value
        type: object
    PayloadVariant_for_GeoPoint:
      anyOf:
      - $ref: '#/components/schemas/GeoPoint'
      - items:
          $ref: '#/components/schemas/GeoPoint'
        type: array
    PayloadVariant_for_String:
      anyOf:
      - type: string
      - items:
          type: string
        type: array
    PayloadVariant_for_double:
      anyOf:
      - format: double
        type: number
      - items:
          format: double
          type: number
        type: array
    PayloadVariant_for_int64:
      anyOf:
      - format: int64
        type: integer
      - items:
          format: int64
          type: integer
        type: array
    PointInsertOps:
      anyOf:
      - description: Inset points from a batch.
        properties:
          batch:
            properties:
              ids:
                items:
                  format: uint64
                  minimum: 0
                  type: integer
                type: array
              payloads:
                items:
                  additionalProperties:
                    $ref: '#/components/schemas/PayloadInterface'
                  nullable: true
                  type: object
                nullable: true
                type: array
              vectors:
                items:
                  items:
                    format: double
                    type: number
                  type: array
                type: array
            required:
            - ids
            - vectors
            type: object
        required:
        - batch
        type: object
      - description: Insert points from a list
        properties:
          points:
            items:
              $ref: '#/components/schemas/PointStruct'
            type: array
        required:
        - points
        type: object
    PointOps:
      anyOf:
      - description: Insert or update points
        properties:
          upsert_points:
            $ref: '#/components/schemas/PointInsertOps'
        required:
        - upsert_points
        type: object
      - description: Delete point if exists
        properties:
          delete_points:
            properties:
              ids:
                items:
                  format: uint64
                  minimum: 0
                  type: integer
                type: array
            required:
            - ids
            type: object
        required:
        - delete_points
        type: object
    PointRequest:
      properties:
        ids:
          items:
            format: uint64
            minimum: 0
            type: integer
          type: array
      required:
      - ids
      type: object
    PointStruct:
      properties:
        id:
          description: Point id
          format: uint64
          minimum: 0
          type: integer
        payload:
          additionalProperties:
            $ref: '#/components/schemas/PayloadInterface'
          description: Payload values (optional)
          nullable: true
          type: object
        vector:
          description: Vector
          items:
            format: double
            type: number
          type: array
      required:
      - id
      - vector
      type: object
    Range:
      properties:
        gt:
          description: point.key > range.gt
          format: double
          nullable: true
          type: number
        gte:
          description: point.key >= range.gte
          format: double
          nullable: true
          type: number
        key:
          description: Name of the field to match with
          type: string
        lt:
          description: point.key < range.lt
          format: double
          nullable: true
          type: number
        lte:
          description: point.key <= range.lte
          format: double
          nullable: true
          type: number
      required:
      - key
      type: object
    Record:
      description: Point data
      properties:
        id:
          description: Id of the point
          format: uint64
          minimum: 0
          type: integer
        payload:
          additionalProperties:
            $ref: '#/components/schemas/PayloadType'
          description: Payload - values assigned to the point
          nullable: true
          type: object
        vector:
          description: Vector of the point
          items:
            format: double
            type: number
          nullable: true
          type: array
      required:
      - id
      type: object
    ScoredPoint:
      properties:
        id:
          description: Point id
          format: uint64
          minimum: 0
          type: integer
        score:
          description: Points vector distance to the query vector
          format: float
          type: number
      required:
      - id
      - score
      type: object
    SearchParams:
      anyOf:
      - description: Params relevant to HNSW index
        properties:
          hnsw:
            properties:
              ef:
                description: Size of the beam in a beam-search. Larger the value -
                  more accurate the result, more time required for search.
                format: uint
                minimum: 0
                type: integer
            required:
            - ef
            type: object
        required:
        - hnsw
        type: object
      description: Additional parameters of the search
    SearchRequest:
      description: Search request
      properties:
        filter:
          anyOf:
          - $ref: '#/components/schemas/Filter'
          - nullable: true
          description: Look only for points which satisfies this conditions
        params:
          anyOf:
          - $ref: '#/components/schemas/SearchParams'
          - nullable: true
          description: Additional search params
        top:
          description: Max number of result to return
          format: uint
          minimum: 0
          type: integer
        vector:
          description: Look for vectors closest to this
          items:
            format: double
            type: number
          type: array
      required:
      - top
      - vector
      type: object
    SegmentConfig:
      properties:
        distance:
          allOf:
          - $ref: '#/components/schemas/Distance'
          description: Type of distance function used for measuring distance between
            vectors
        index:
          allOf:
          - $ref: '#/components/schemas/Indexes'
          description: Type of index used for search
        storage_type:
          allOf:
          - $ref: '#/components/schemas/StorageType'
          description: Type of vector storage
        vector_size:
          description: Size of a vectors used
          format: uint
          minimum: 0
          type: integer
      required:
      - distance
      - index
      - storage_type
      - vector_size
      type: object
    StorageOps:
      anyOf:
      - description: Create new collection and (optionally) specify index params
        properties:
          create_collection:
            properties:
              distance:
                $ref: '#/components/schemas/Distance'
              index:
                anyOf:
                - $ref: '#/components/schemas/Indexes'
                - nullable: true
              name:
                type: string
              vector_size:
                format: uint
                minimum: 0
                type: integer
            required:
            - distance
            - name
            - vector_size
            type: object
        required:
        - create_collection
        type: object
      - description: Delete collection with given name
        properties:
          delete_collection:
            type: string
        required:
        - delete_collection
        type: object
      - description: Perform changes of collection aliases Alias changes are atomic,
          meaning that no collection modifications can happen between alias operations
        properties:
          change_aliases:
            properties:
              actions:
                items:
                  $ref: '#/components/schemas/AliasOperations'
                type: array
            required:
            - actions
            type: object
        required:
        - change_aliases
        type: object
    StorageType:
      anyOf:
      - description: Store vectors in memory and use persistence storage only if vectors
          are changed
        properties:
          type:
            enum:
            - in_memory
            type: string
        required:
        - type
        type: object
      - description: Use memmap to store vectors, a little slower than `InMemory`,
          but requires little RAM
        properties:
          type:
            enum:
            - mmap
            type: string
        required:
        - type
        type: object
      description: Type of vector storage
    UpdateResult:
      properties:
        operation_id:
          description: Sequential number of the operation
          format: uint64
          minimum: 0
          type: integer
        status:
          allOf:
          - $ref: '#/components/schemas/UpdateStatus'
          description: Update status
      required:
      - operation_id
      - status
      type: object
    UpdateStatus:
      enum:
      - acknowledged
      - completed
      type: string
